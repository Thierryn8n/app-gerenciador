const fs = require('fs');
const { createClient } = require('@supabase/supabase-js');

// Fun√ß√£o para carregar vari√°veis de ambiente do arquivo .env.local
function loadEnvFile() {
  try {
    const envContent = fs.readFileSync('.env.local', 'utf8');
    const envVars = {};
    
    envContent.split('\n').forEach(line => {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=');
        if (key && valueParts.length > 0) {
          envVars[key] = valueParts.join('=').replace(/^["']|["']$/g, '');
        }
      }
    });
    
    return envVars;
  } catch (error) {
    console.error('Erro ao carregar .env.local:', error.message);
    return {};
  }
}

async function testUsuariosAfterFix() {
  console.log('üîß Testando inser√ß√£o na tabela usuarios ap√≥s corre√ß√£o da estrutura...');
  
  // Carregar vari√°veis de ambiente
  const env = loadEnvFile();
  
  if (!env.NEXT_PUBLIC_SUPABASE_URL || !env.SUPABASE_SERVICE_ROLE_KEY) {
    console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
    console.log('Certifique-se de que .env.local cont√©m:');
    console.log('- NEXT_PUBLIC_SUPABASE_URL');
    console.log('- SUPABASE_SERVICE_ROLE_KEY');
    return;
  }
  
  // Configurar cliente Supabase com service role key (bypassa RLS)
  const supabase = createClient(
    env.NEXT_PUBLIC_SUPABASE_URL,
    env.SUPABASE_SERVICE_ROLE_KEY
  );
  
  console.log('‚úÖ Cliente Supabase configurado com service role key');
  
  try {
    // Teste 1: Verificar se a tabela existe e sua estrutura
    console.log('\nüìã Verificando estrutura da tabela usuarios...');
    const { data: tableInfo, error: tableError } = await supabase
      .from('usuarios')
      .select('*')
      .limit(1);
    
    if (tableError) {
      console.error('‚ùå Erro ao acessar tabela usuarios:', tableError.message);
      return;
    }
    
    console.log('‚úÖ Tabela usuarios acess√≠vel');
    
    // Teste 2: Inserir usu√°rio b√°sico
    console.log('\nüë§ Testando inser√ß√£o de usu√°rio b√°sico...');
    const usuarioBasico = {
      id: '550e8400-e29b-41d4-a716-446655440001',
      nome: 'Teste B√°sico',
      email: 'teste.basico@exemplo.com'
    };
    
    const { data: insertBasico, error: errorBasico } = await supabase
      .from('usuarios')
      .insert([usuarioBasico])
      .select();
    
    if (errorBasico) {
      console.error('‚ùå Erro na inser√ß√£o b√°sica:', errorBasico.message);
    } else {
      console.log('‚úÖ Inser√ß√£o b√°sica bem-sucedida:', insertBasico);
    }
    
    // Teste 3: Inserir usu√°rio completo
    console.log('\nüë§ Testando inser√ß√£o de usu√°rio completo...');
    const usuarioCompleto = {
      id: '550e8400-e29b-41d4-a716-446655440002',
      nome: 'Teste Completo',
      email: 'teste.completo@exemplo.com',
      status: 'ativo',
      empresa: 'Empresa Teste',
      telefone: '(11) 99999-9999',
      avatar_url: 'https://exemplo.com/avatar.jpg'
    };
    
    const { data: insertCompleto, error: errorCompleto } = await supabase
      .from('usuarios')
      .insert([usuarioCompleto])
      .select();
    
    if (errorCompleto) {
      console.error('‚ùå Erro na inser√ß√£o completa:', errorCompleto.message);
    } else {
      console.log('‚úÖ Inser√ß√£o completa bem-sucedida:', insertCompleto);
    }
    
    // Teste 4: Verificar dados inseridos
    console.log('\nüìä Verificando dados inseridos...');
    const { data: usuarios, error: selectError } = await supabase
      .from('usuarios')
      .select('*')
      .in('email', ['teste.basico@exemplo.com', 'teste.completo@exemplo.com']);
    
    if (selectError) {
      console.error('‚ùå Erro ao consultar usu√°rios:', selectError.message);
    } else {
      console.log('‚úÖ Usu√°rios encontrados:', usuarios);
    }
    
    // Teste 5: Limpar dados de teste
    console.log('\nüßπ Limpando dados de teste...');
    const { error: deleteError } = await supabase
      .from('usuarios')
      .delete()
      .in('email', ['teste.basico@exemplo.com', 'teste.completo@exemplo.com']);
    
    if (deleteError) {
      console.error('‚ùå Erro ao limpar dados de teste:', deleteError.message);
    } else {
      console.log('‚úÖ Dados de teste removidos');
    }
    
    console.log('\nüéâ Teste conclu√≠do! A tabela usuarios est√° funcionando corretamente.');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Configure as pol√≠ticas RLS no painel do Supabase se necess√°rio');
    console.log('2. A tabela est√° pronta para uso na aplica√ß√£o');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    console.log('\nüîß Solu√ß√µes poss√≠veis:');
    console.log('1. Execute o script fix-usuarios-structure.sql no painel do Supabase');
    console.log('2. Verifique se as vari√°veis de ambiente est√£o corretas');
    console.log('3. Verifique a conex√£o com o banco de dados');
  }
}

// Executar o teste
testUsuariosAfterFix();